# =============================================================================
# AP-ALINK-FPV Configuration File
# =============================================================================

# =============================================================================
# BASIC SETTINGS
# =============================================================================
bitrate_max=19
wificard=8812au    # Options: 8812au, 8812eu2, 873xbu
                   # MCS thresholds automatically optimized per hardware
fps=120

# =============================================================================
# WIFI POWER MANAGEMENT
# =============================================================================
# CRITICAL: Disable WiFi power saving for FPV stability
# Both RTL8812AU and RTL8812EU drivers have power management features that
# cause connection instability during dynamic activities (flying, racing, etc.)
# 
# Power management affects:
# - Connection stability during movement
# - Packet loss during power state transitions
# - Latency spikes when resuming from sleep
# - Overall FPV video quality and responsiveness
#
# Set to 0 to disable power saving (RECOMMENDED for FPV)
# Set to 1 to enable power saving (NOT RECOMMENDED for FPV)
#
# The system will:
# 1. Use 'iw wlan0 set power_save off' for runtime control
# 2. Attempt to reload driver with power management disabled
# 3. Provide manual configuration instructions if automatic setup fails
disable_wifi_power_save=0

# WiFi Transmission Power Configuration
# CRITICAL: Set maximum TX power for maximum FPV range
# Different WiFi cards have different maximum power capabilities:
# - RTL8812AU: 30 dBm (1000 mW) - Maximum range
# - RTL8812EU: 30 dBm (1000 mW) - Maximum range  
# - RTL873xBU: 20 dBm (100 mW) - Limited by hardware
#
# Set to 1 to enable maximum TX power (RECOMMENDED for FPV)
# Set to 0 to disable TX power optimization (NOT RECOMMENDED for FPV)
#
# The system will automatically set appropriate maximum power per card type
enable_maximum_tx_power=1

# =============================================================================
# FEC (FORWARD ERROR CORRECTION) CONFIGURATION
# =============================================================================
# FEC adds redundancy to recover lost packets, complementing your emergency drop system
# 
# FEC Benefits:
# - Recovers packets lost despite bitrate reduction
# - Handles burst errors and interference spikes
# - Provides redundancy for critical data
# - Works alongside emergency drop (preventive + corrective)
#
# FEC Trade-offs:
# - Increases total bitrate (redundancy overhead)
# - Adds latency for packet recovery
# - More complex than emergency drop alone
#
# Set to 1 to enable FEC (adds packet recovery capability)
# Set to 0 to disable FEC (use only emergency drop system)
#
# FEC K/N Ratios (configurable per signal quality):
# - Good signal: 3/4 (light FEC, 33% overhead)
# - Medium signal: 2/3 (medium FEC, 50% overhead)  
# - Poor signal: 1/2 (heavy FEC, 100% overhead)
#
# Note: FEC works best with your existing emergency drop system:
# 1. Emergency drop prevents packet loss (preventive)
# 2. FEC recovers packets that still get lost (corrective)
enable_fec=0

# FEC threshold configuration (VLQ percentage ranges)
# These determine when to switch between different FEC ratios:
# - Range 0 to fec_low_cutoff: FEC ratio 1 (1/2 - heavy protection)
# - Range fec_low_cutoff+1 to fec_high_cutoff: FEC ratio 2 (2/3 - medium protection)  
# - Range fec_high_cutoff+1 to 100: FEC ratio 3 (3/4 - light protection)
#
# Default values optimized for FPV racing:
# - Low cutoff: 50% (below this = poor signal = heavy FEC)
# - High cutoff: 80% (above this = good signal = light FEC)
fec_low_cutoff=50
fec_high_cutoff=80

# FEC N value (total symbols per codeword)
# This determines the total number of symbols in each FEC codeword:
# - N=4: Standard value, supports ratios 1/4, 2/4, 3/4
# - N=6: More granular, supports ratios 1/6, 2/6, 3/6, 4/6, 5/6
# - N=8: Maximum granularity, supports ratios 1/8 through 7/8
#
# Range: 2-8 (minimum 4 recommended for 3/4 FEC ratio)
# Higher N values provide more FEC ratio options but increase complexity
fec_n=4

# =============================================================================
# PIT MODE - LOW POWER STANDBY WITH HTTP WAKE-UP
# =============================================================================
# PIT mode provides low power standby for battery conservation during
# racing events or standby periods, while maintaining HTTP responsiveness
# for quick activation via web interface or mobile app
#
# Set to 0 to disable PIT mode (full power FPV mode)
# Set to 1 to enable PIT mode (low power standby with HTTP wake-up)
#
# PIT Mode Features:
# - Low power WiFi state for battery conservation
# - HTTP API remains responsive for wake-up calls
# - Quick transition back to full power FPV mode
# - Perfect for racing events with standby periods
#
# HTTP API: GET /api/toggle/pitmode - Toggle PIT mode on/off
pit_mode_enabled=0

# =============================================================================
# VIDEO QUALITY CONTROL - MCS RATE CONTROL ONLY
# =============================================================================
# NOTE: ROI QP Delta is disabled in recent Majestic builds
# Video quality is now controlled by MCS rate control only
# QP Delta settings removed - no longer functional

# =============================================================================
# SIGNAL PROCESSING & FILTERS
# =============================================================================

# Filter Chain Configuration
# Format: comma-separated filter types (0=Kalman, 1=Low-Pass, 2=Mode, 3=Derivative, 4=2-Pole LPF, 5=Mean, 6=Gaussian)
# Examples: "0" (single Kalman), "2,0" (Mode->Kalman), "1,4" (Low-Pass->2-Pole LPF), "5" (Mean only), "6" (Gaussian only)
# Note: Mean filter (5) provides simple moving average - good for basic noise reduction
# Note: Gaussian filter (6) provides bell-curve weighted average - smooth noise reduction with center emphasis
# Default: "0" (Kalman filter - optimal for FPV applications)
rssi_filter_chain=0
dbm_filter_chain=0



# Low-Pass Filter Settings (used by filter types 1 and 4)
lpf_cutoff_freq=2.0
lpf_sample_freq=10.0

# Kalman Filter Parameters
# Process variance - how much the signal is expected to change (lower = more stable)
kalman_rssi_process=0.00001
kalman_dbm_process=0.00001

# Measurement variance - how noisy the measurements are (higher = more noisy)
kalman_rssi_measure=0.1
kalman_dbm_measure=0.5

# =============================================================================
# SIGNAL SAMPLING & TIMING
# =============================================================================

# RSSI Reading Method
# 0 = Memory mapping (mmap) - Faster, uses less CPU, but may not work on all systems
# 1 = File rewind - More compatible, slightly higher CPU usage
# Default: 0 (memory mapping)
rssi_read_method=1
# Frame Sync Removed
# Bitrate control is independent of video frame rate
# There's no benefit to syncing WiFi changes with video timing

# Startup Delay Removed
# No delay needed - FPV systems require immediate responsiveness

# Signal Sampling Configuration
# Number of frames between signal readings (higher = less CPU usage, lower = more responsive)
# At 120 FPS: 1=120Hz sampling, 2=60Hz, 3=40Hz, 5=24Hz, 10=12Hz
signal_sampling_interval=5

# Independent Signal Sampling Frequency (Hz)
# This allows signal sampling independent of frame rate for better responsiveness
# Higher values = more responsive to signal changes, more CPU usage
# Lower values = less CPU usage, less responsive to signal changes
# Recommended: 50-100Hz for racing, 20-50Hz for general use
signal_sampling_freq_hz=50

# =============================================================================
# BITRATE CONTROL & COOLDOWNS
# =============================================================================

# Cooldown System Control
# 0 = Cooldown system DISABLED (immediate bitrate changes)
# 1 = Cooldown system ENABLED (asymmetric timing)
# Default: 1 (enabled for stability)
cooldown_enabled=0

# Asymmetric Cooldown Parameters (only used when cooldown_enabled=1)
# Minimum time between any bitrate changes (ms)
strict_cooldown_ms=200

# Additional time required before increasing bitrate (ms)
up_cooldown_ms=3000

# Emergency Cooldown Configuration
# Time between bitrate decreases (lower = faster response to signal drops)
# At 120 FPS: 50ms=6 frames, 25ms=3 frames, 8ms=1 frame
# For ultra-low latency racing, use 8-25ms (1-3 frames)
emergency_cooldown_ms=50

# Minimum percentage change required to trigger bitrate change
min_change_percent=5



# =============================================================================
# EMERGENCY & SAFETY SETTINGS
# =============================================================================

# Emergency drop settings
emergency_rssi_threshold=30
emergency_bitrate=1000

# Hardware-specific RSSI offset (calibrate for your DIY build)
# Positive values = more sensitive (lower threshold)
# Negative values = less sensitive (higher threshold)
# Default: 0 (no offset)
hardware_rssi_offset=0


# Control Algorithm Configuration
# 0 = PID Controller (smooth transitions, more complex)
# 1 = Simple FIFO (fast, direct, more performant)
# Default: 1 (Simple FIFO for better performance)
control_algorithm=1
# =============================================================================
# PID CONTROLLER (Advanced Users)
# =============================================================================

# PID Controller Parameters
# Proportional gain - immediate response to error (higher = more aggressive)
pid_kp=1.0

# Integral gain - eliminates steady-state error over time (higher = faster correction)
pid_ki=0.05

# Derivative gain - reduces overshoot and oscillation (higher = more damping)
pid_kd=0.4

# =============================================================================
# EXPOSURE CONTROL
# =============================================================================

# Auto Exposure Calculation
# 0 = Use manual exposure values from racing_exposure
# 1 = Calculate exposure based on frame rate (180° shutter rule - cinematography guideline)
# NOTE: CMOS rolling shutter cameras (IMX415, etc.) can set exposure independently of frame rate
# This provides a starting point, but exposure should be optimized for your specific needs:
# - Racing: Short exposure for minimal motion blur
# - Low Light: Longer exposure for brightness
# - Latency: Short exposure for responsiveness
# Default: 1 (auto-calculate as starting point)
auto_exposure_enabled=1

# =============================================================================
# RACING MODE OVERRIDES CONFIGURATION
# =============================================================================
race_mode=1
# Racing Mode Configuration
# racing_fps is used when racing mode is enabled, fps is used for normal operation
racing_video_resolution=1280x720
racing_exposure=11
racing_fps=120

# Command Execution Method Configuration
# 0 = Use popen() (recommended - better error handling)
# 1 = Use system() (legacy - less reliable on SBCs)
# Default: 0 (popen)
command_execution_method=0
# Racing Mode Filter Chain Configuration (used when race_mode=1)
# Optimized for low latency and fast response
racing_rssi_filter_chain=1
racing_dbm_filter_chain=1

# =============================================================================
# CENTRALIZED SLEEP CONFIGURATION
# =============================================================================

# WiFi Performance Mode (legacy - still works but see sleep settings below)
# 0 = Normal mode, 1 = High performance, 2 = Ultra-low latency
wifi_performance_mode=0

# Centralized Sleep Settings (microseconds/milliseconds)
# Base loop sleep - applied every iteration regardless of mode
sleep_main_loop_us=100

# Additional sleep for each performance mode (milliseconds)
sleep_normal_mode_ms=20      # Normal mode: 0.1ms + 20ms = 20.1ms total
sleep_high_perf_mode_ms=5    # High performance: 0.1ms + 5ms = 5.1ms total  
sleep_ultra_low_mode_ms=0    # Ultra-low latency: 0.1ms only

# Error condition sleep (when RSSI=0 or driver unavailable)
sleep_error_condition_ms=100

# Smart Sleep Mode
# 0 = Simple sleep (fixed timing based on performance mode)
# 1 = Smart sleep (adaptive timing based on workload)
# Default: 0 (simple sleep)
smart_sleep_enabled=0

# =============================================================================
# TROUBLESHOOTING
# =============================================================================
# If you see RSSI=0 and VLQ=-1000%+ in debug output:
# 1. Check driver path exists: ls -la /proc/net/rtl88x2eu/wlan0/
# 2. If not found, try: wificard=8812au
# 3. Check alternative paths: ls -la /proc/net/rtl88xxau/wlan0/
# 4. Verify sta_tp_info file exists and contains RSSI data
# 5. Run: sudo ./ap_alink_debug to see diagnostic output
# 6. If WiFi enabled causes FPS drops, try: wifi_performance_mode=0